#!/usr/bin/env python3

import rospy
import os
import shlex
import subprocess
import tempfile
import threading
import traceback
import time
import logging
import roslib
import sys
import olympe
import anafi_autonomy

from std_msgs.msg import String

from olympe.messages.drone_manager import connection_state
from olympe.messages.skyctrl.CoPiloting import setPilotingSource
from olympe.messages.skyctrl.CoPilotingState import pilotingSource
from olympe.messages import mapper
from olympe.enums.mapper import button_event

from anafi_autonomy.msg import SkycontrollerCommand

olympe.log.update_config({"loggers": {"olympe": {"level": "ERROR"}}})

SKYCTRL_IP = "192.168.53.1"


class SkyController3(threading.Thread):
	def __init__(self):
		# Publishers					
		self.pub_state = rospy.Publisher("/skycontroller/state", String, queue_size=1)
		self.pub_skycontroller = rospy.Publisher("/skycontroller/command", SkycontrollerCommand, queue_size=1)
		
		# Connect to the SkyController		
		self.skyctrl = olympe.SkyController(SKYCTRL_IP)
		
		# Create listener for RC events
		self.every_event_listener = anafi_autonomy.EventListener(self)
		
		self.msg_skycontroller = SkycontrollerCommand()
		self.msg_skycontroller.header.frame_id = '/body'
		
		rospy.on_shutdown(self.stop)
						
		self.connect()
		
		self.skyctrl(mapper.grab(buttons=(1<<0|1<<1|1<<2|1<<3), axes=(1<<0|1<<1|1<<2|1<<3|1<<4|1<<5))).wait() # bitfields
		self.skyctrl(setPilotingSource(source="Controller")).wait()
		
	def connect(self):
		self.every_event_listener.subscribe()
		
		rate = rospy.Rate(1) # 1hz
		while True:
			self.pub_state.publish("CONNECTING")
			rospy.loginfo("Connecting to SkyController");
			connection = self.skyctrl.connect()
			if getattr(connection, 'OK'):
				break
			if rospy.is_shutdown():
				exit()
			rate.sleep()
		
		# Connect to the SkyController	
		self.pub_state.publish("CONNECTED_SKYCONTROLLER")
		rospy.loginfo("Connection to SkyController: " + getattr(connection, 'message'))
			
	def connectAnafi(self):
		rate = rospy.Rate(1) # 1hz
		# Connect to the drone
		while True:
			if self.skyctrl(connection_state(state="connected", _policy="check")):
				break				
			if rospy.is_shutdown():
				exit()
			else:
				self.pub_state.publish("SERCHING_DRONE")
				rospy.loginfo_once("Connection to Anafi: " + str(self.skyctrl.get_state(connection_state)["state"]))
			rate.sleep()
		self.pub_state.publish("CONNECTED_DRONE")			
		rospy.loginfo("Connection to Drone: " + str(self.skyctrl.get_state(connection_state)["state"]))
		
	def disconnect(self):
		self.pub_state.publish("DISCONNECTING")
		self.msg_skycontroller = SkycontrollerCommand()
		self.msg_skycontroller.header.stamp = rospy.Time.now()
		self.pub_skycontroller.publish(self.msg_skycontroller)
		
		self.every_event_listener.unsubscribe()
		#self.skyctrl.stop_video_streaming()
		self.skyctrl.disconnect()
		self.pub_state.publish("DISCONNECTED")
		
	def stop(self):
		rospy.loginfo("Skycontroller is stopping...")
		self.disconnect()
											
	def run(self):
		rate = rospy.Rate(10) # 10hz			
		while not rospy.is_shutdown():
			connection = self.skyctrl.connect()
			if not getattr(connection, 'OK'):
				rospy.logfatal(getattr(connection, 'message'))
				self.disconnect()
				self.connect()
				
			self.msg_skycontroller.header.stamp = rospy.Time.now()
			self.pub_skycontroller.publish(self.msg_skycontroller)
			
			# Publish button pressing event only once
			self.msg_skycontroller.return_home = False
			self.msg_skycontroller.takeoff_land = False
			self.msg_skycontroller.reset_camera = False
			self.msg_skycontroller.reset_zoom = False	
					
			rate.sleep()


if __name__ == '__main__':
	rospy.init_node('skycontroller', anonymous = False)
	rospy.loginfo("Skycontroller is running...")
	skycontroller = SkyController3()	
	try:
		skycontroller.run()
	except rospy.ROSInterruptException:
		#traceback.print_exc()
		pass
